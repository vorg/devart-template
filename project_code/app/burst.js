// Generated by CoffeeScript 1.6.2
var Arcball, Color, Cube, Diffuse, IO, MathUtils, Mesh, MovieRecorder, PerspectiveCamera, Platform, Scene, ShowDepth, SolidColor, Time, Vec3, Window, extractTopLevelDomain, fx, getEntryMimeType, getEntryUrl, hem, pad, pex, randomVec3, seed, unique, urlToHostName, _ref, _ref1, _ref2, _ref3, _ref4;

pex = pex || require('./lib/pex');

_ref = pex.sys, IO = _ref.IO, Window = _ref.Window, Platform = _ref.Platform;

_ref1 = pex.scene, PerspectiveCamera = _ref1.PerspectiveCamera, Scene = _ref1.Scene, Arcball = _ref1.Arcball;

_ref2 = pex.materials, SolidColor = _ref2.SolidColor, Diffuse = _ref2.Diffuse, ShowDepth = _ref2.ShowDepth;

Mesh = pex.gl.Mesh;

Cube = pex.geom.gen.Cube;

_ref3 = pex.geom, Vec3 = _ref3.Vec3, hem = _ref3.hem;

Color = pex.color.Color;

_ref4 = pex.utils, MathUtils = _ref4.MathUtils, Time = _ref4.Time, MovieRecorder = _ref4.MovieRecorder;

randomVec3 = MathUtils.randomVec3, seed = MathUtils.seed;

fx = pex.fx;

unique = function(array) {
  return array.sort().filter(function(e, i, arr) {
    return arr.lastIndexOf(e) === i;
  });
};

getEntryMimeType = function(entry) {
  return entry.response.content.mimeType;
};

getEntryUrl = function(entry) {
  return entry.request.url;
};

urlToHostName = (function() {
  var a, url;

  if (Platform.isPlask) {
    url = require('url');
    return function(s) {
      return url.parse(s).hostname;
    };
  } else if (Platform.isBrowser) {
    a = document.createElement("a");
    return function(s) {
      a.href = s;
      return a.hostname || s;
    };
  } else {
    return function(s) {
      return s;
    };
  }
})();

extractTopLevelDomain = function(domain) {
  return domain.match(/[^\.]+\.[^\.]+$/)[0];
};

pad = function(num, char, len) {
  var s;

  s = '' + num;
  while (s.length < len) {
    s = char + s;
  }
  return s;
};

pex.require(['materials/CorrectedGamma', 'fx/Fog', 'fx/TonemapLinear', 'fx/TonemapReinhard', 'fx/TonemapUncharted', 'fx/TonemapRichard', 'lib/timeline'], function(CorrectedGamma, Fog, TonemapLinear, TonemapReinhard, TonemapUncharted, TonemapRichard, timeline) {
  return Window.create({
    settings: {
      width: 1024,
      height: 512,
      fullscreen: Platform.isBrowser
    },
    init: function() {
      var _this = this;

      seed(0);
      if (Platform.isPlask) {
        this.recorder = new MovieRecorder('screenshots');
      }
      if (Platform.isBrowser) {
        this.gl.getExtension("OES_texture_float");
      }
      this.initScene();
      this.loadData();
      this.needsScreenshot = false;
      return this.on('keyDown', function(e) {
        if (e.str === 'S') {
          return _this.needsScreenshot = true;
        }
      });
    },
    initScene: function() {
      this.instances = [];
      this.camera = new PerspectiveCamera(60, this.width / this.height);
      this.scene = new Scene();
      this.camera.target = new Vec3(0, 0, 20);
      return this.bgColor = Color.create(0.15 * 0.9, 0.18 * 0.9, 0.226 * 0.9, 1);
    },
    loadData: function() {
      var _this = this;

      return IO.loadTextFile("data/temp/theverge20140311.har", function(data) {
        var boom;

        data = JSON.parse(data);
        _this.entries = data.log.entries;
        _this.mimeTypes = unique(_this.entries.map(getEntryMimeType));
        _this.servers = unique(_this.entries.map(getEntryUrl).map(urlToHostName));
        _this.rootServers = unique(_this.servers.map(extractTopLevelDomain));
        _this.buildInstances();
        _this.buildInstances();
        if (Platform.isPlask) {
          _this.recorder.start();
        }
        boom = function() {
          _this.camera.position.z = -5;
          return timeline.anim(_this.camera.position).to(0, {
            z: 15
          }, 4, timeline.Timeline.Easing.Cubic.EaseInOut);
        };
        setInterval(boom, 4100);
        return boom();
      });
    },
    buildInstances: function() {
      return this.entries.map(this.makeEntryInstance.bind(this));
    },
    saveScreenshot: function(path) {
      var d, filename;

      d = new Date();
      filename = path + "/screenshot_";
      filename += "" + (d.getFullYear()) + "-" + (pad(d.getMonth() + 1, '0', 2)) + "-" + (pad(d.getDate(), '0', 2));
      filename += "_" + (pad(d.getHours(), '0', 2)) + ":" + (pad(d.getMinutes(), '0', 2)) + ":" + (pad(d.getSeconds(), '0', 2)) + ".png";
      return this.gl.writeImage('png', filename);
    },
    makeEntryInstance: function(entry, entryIndex) {
      var b, color, entryInstance, entryInstance2, geom, hue, mimeType, r, rootServer, white;

      rootServer = urlToHostName(getEntryUrl(entry));
      mimeType = getEntryMimeType(entry);
      r = entryIndex / 32;
      hue = this.mimeTypes.indexOf(mimeType) / this.mimeTypes.length;
      color = Color.createHSV(hue, 0.8, 0.7 + r);
      b = 2;
      white = Color.create(b, b, b, 1.0);
      geom = new Cube(0.1, 0.1, 2.5, 2, 2, 7);
      entryInstance = new Mesh(geom, new CorrectedGamma({
        diffuseColor: white,
        specularColor: new Color(0.1, 0.1, 0.1, 1.0),
        ambientColor: new Color(0.1, 0.1, 0.1, 1),
        wrap: 1,
        correctGamma: true,
        conserveDiffuseEnergy: true
      }));
      entryInstance = new Mesh(geom, new SolidColor({
        color: white,
        specularColor: new Color(0.1, 0.1, 0.1, 1.0),
        ambientColor: new Color(0.1, 0.1, 0.1, 1),
        wrap: 1,
        correctGamma: true,
        conserveDiffuseEnergy: true
      }));
      entryInstance.position = randomVec3(10);
      entryInstance.position.z += 9;
      this.instances.push(entryInstance);
      geom = new Cube(0.1, 0.1, 2.5, 2, 2, 7);
      entryInstance2 = new Mesh(geom, new CorrectedGamma({
        diffuseColor: color,
        specularColor: new Color(0.1, 0.1, 0.1, 1.0),
        ambientColor: new Color(0.1, 0.1, 0.1, 1),
        wrap: 1,
        correctGamma: true,
        conserveDiffuseEnergy: true
      }));
      entryInstance2.position = entryInstance.position.dup();
      entryInstance2.position.z += 0.01 + 1.5;
      this.instances.push(entryInstance2);
      return this.scene.add(entryInstance2);
    },
    drawScene: function() {
      this.gl.clearColor(this.bgColor.r, this.bgColor.g, this.bgColor.b, this.bgColor.a);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.gl.enable(this.gl.DEPTH_TEST);
      this.scene.draw(this.camera);
      if (this.needsScreenshot) {
        this.saveScreenshot('screenshots');
        return this.needsScreenshot = false;
      }
    },
    drawDepth: function() {
      var oldMaterials,
        _this = this;

      this.gl.clearColor(this.bgColor.r, this.bgColor.g, this.bgColor.b, this.bgColor.a);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.gl.enable(this.gl.DEPTH_TEST);
      if (!this.showDepthMaterial) {
        this.showDepthMaterial = new ShowDepth({
          far: 9
        });
      }
      oldMaterials = this.instances.map(function(instance) {
        var oldMaterial;

        oldMaterial = instance.material;
        instance.setMaterial(_this.showDepthMaterial);
        return oldMaterial;
      });
      this.scene.draw(this.camera);
      oldMaterials.forEach(function(material, index) {
        return _this.instances[index].setMaterial(material);
      });
      if (this.needsScreenshot) {
        this.saveScreenshot('screenshots');
        return this.needsScreenshot = false;
      }
    },
    draw: function() {
      var color, depth, foggy;

      if (Platform.isPlask) {
        this.recorder.update();
      }
      timeline.Timeline.getGlobalInstance().update(Time.delta);
      this.camera.updateMatrices();
      this.gl.clearColor(0, 0, 0, 1);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT);
      this.gl.disable(this.gl.DEPTH_TEST);
      color = fx().render({
        drawFunc: this.drawScene.bind(this),
        bpp: 32,
        depth: true,
        width: this.width,
        height: this.height
      });
      depth = color.render({
        drawFunc: this.drawDepth.bind(this),
        bpp: 32,
        depth: true,
        width: this.width,
        height: this.height
      });
      foggy = color.fog(depth, {
        fogColor: this.bgColor,
        bpp: 32
      });
      foggy.blit({
        width: this.width,
        height: this.height
      });
      if (Platform.isPlask) {
        return this.recorder.capture();
      }
    }
  });
});

/*
//@ sourceMappingURL=burst.map
*/
